?? When would you want to use a remote repository rather than keeping all your work local?
============
The remote repo helps collaborating with other developers and keep track of changes
you issue from different computers.


?? Why might you want to always pull changes manually rather than having Git 
automatically stay up-to-date with your remote repository?
===========
When working on your local machine, you don't want content to get pulled and that changes
what you are working on without asking. This would be a complete mess. Similarily, you
don't want to push unfinished work on remote as other people would not be able to understand
what you did. So keeping control on push and pull is definitely the right way to do.


?? Describe the differences between forks, clones, and branches. When would you use
one instead of another?
===========
Branches are happening inside a repo. It helps designing new feature while keeping 
track of stable versions and that sort of stuff. You clone a repo to get a copied
version of a repo that ise either local or remote. Forking is usefull when you want
to work on someone else's repo but you don't have the right to do so. By forking, you
get a copy in which you can work on your own.


?? What is the benefit of having a copy of the last known state of the remote stored locally?
===========
Then we can work on something that doesn't change and that we know is stable. We don't
want the base of the project we work on to change while we're actually working on it.
Then whenever it's ready we can send it online.


?? How would you collaborate without using Git or GitHub? What would be easier, 
and what would be harder?
===========
I'm at the moment collaborating using Google Drive or Dropbox. These can help when
dealing with non-text files, but GitHub is definitely a better option for coding
thanks to its version control system that helps to keep track of changes, keep
stable versions on main branches, and collaborate efficiently around a project.